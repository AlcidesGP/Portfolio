{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b24a0032",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import plotly.express as px\n",
    "import plotly.subplots as sp\n",
    "import plotly.graph_objects as go\n",
    "\n",
    "st.set_page_config(layout=\"wide\")\n",
    "st.title('Módulo 15 - Atividade I')\n",
    "st.write('- Reproduzir, ao menos, 20 códigos extraídos das páginas da documentação do streamlit')\n",
    "st.write(\"\"\"- Para realizar a atividade, irei utilizar um dataset que fiz coleta e tratamento, usando como base a glassdoor. O dataset consiste\n",
    "         sobre informações de vagas de emprego em meados de 2022 (se não me engano). Como o foco desse trabalho não é sobre webscrapping, deixo aqui\n",
    "         informado abaixo o link do código que usei para coletar os dados. \"\"\")\n",
    "\n",
    "st.write(\"\"\" Segue o link para a coleta de dados -> [https://alcidescoutinho.github.io/alcidesgabriel.github.io/C%C3%B3digo%20em%20HTML/Coleta_dos_dados_de_vaga%20(1).html]\"\"\")\n",
    "\n",
    "st.button(\"Rerun\")\n",
    "\n",
    "@st.cache_data\n",
    "def carregar_dados():\n",
    "    data = pd.read_csv(\"base_dados_tratado.csv\")\n",
    "    return data\n",
    "\n",
    "df = carregar_dados()\n",
    "notas = list()\n",
    "for i in range(df.shape[0]):\n",
    "    notas.append(df.iloc[i,12:17].tolist())\n",
    "    \n",
    "df['notas'] = notas\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "st.title('Avaliação por Local da vaga')\n",
    "# elementos \n",
    "locais = df['Local'].unique().tolist()\n",
    "locais.insert(0,'Todos')\n",
    "local_ = st.selectbox(\n",
    "    'Qual local da vaga deseja avaliar?',\n",
    "    (locais)\n",
    ")\n",
    "\n",
    "if local_ == 'Todos':\n",
    "    df_analise = df.copy()\n",
    "else:\n",
    "    df_analise = df.loc[df['Local'] == local_].copy()\n",
    "\n",
    "st.subheader(f'Para a seleção {local_}, há um total de ...{df_analise.shape[0]}.. vagas encontradas', divider='rainbow')\n",
    "\n",
    "def imagem():\n",
    "    figura = sp.make_subplots(rows=3, \n",
    "                              cols=2, \n",
    "                              specs=[[{'type':'domain'},{'type':'domain'}],[{'colspan':2}, None], [{'colspan':2}, None]],\n",
    "                              subplot_titles=('Locais','Experiência','Setores da contratantes',' Gráfico de dispersão da avaliação dos funcionários'))\n",
    "    \n",
    "    \n",
    "    \n",
    "    valores = df_analise['Local'].value_counts().values\n",
    "    nomes = df_analise['Local'].value_counts().index\n",
    "\n",
    "    figura.add_trace(go.Pie(values=valores, labels=nomes), row=1,col=1)\n",
    "    \n",
    "        \n",
    "    valores = df_analise['Experiência'].value_counts().values\n",
    "    nomes = df_analise['Experiência'].value_counts().index\n",
    "    figura.add_trace(go.Pie(values=valores, labels=nomes), row=1,col=2)\n",
    "    palette_de_cores = px.colors.qualitative.Set3\n",
    "    figura.update_traces(marker=dict(colors=palette_de_cores))\n",
    "    \n",
    "\n",
    "\n",
    "    valores = df_analise['Setor'].value_counts().values\n",
    "    nomes = df_analise['Setor'].value_counts().index\n",
    "    figura.add_trace(go.Bar(x=nomes, y=valores,text=valores, textposition='outside'))\n",
    "\n",
    "\n",
    "    elementos = [i for i in range(12,17,1)]\n",
    "    elementos.insert(0,4)\n",
    "\n",
    "    valores = df_analise.iloc[:,elementos].melt()['value']\n",
    "    nomes = df_analise.iloc[:,elementos].melt()['variable']\n",
    "    figura.add_trace(go.Box(x=valores, y=nomes, orientation='h'),row=3,col=1)\n",
    "\n",
    "\n",
    "    figura.update_layout(width=1380, height=1380, showlegend=True, grid={'rows': 1, 'columns': 2},\n",
    "                        legend=dict(x=0, y=1.15))\n",
    "    \n",
    "    \n",
    "    return st.plotly_chart(figura)\n",
    "\n",
    "imagem()\n",
    "\n",
    "\n",
    "# Mostrar locais de vaga\n",
    "\n",
    "df_analise = df_analise.loc[:,['Empresa','Vaga','Sede','Tamanho','Setor','notas']]\n",
    "\n",
    "\n",
    "st.data_editor(\n",
    "    df_analise,\n",
    "    column_config={\n",
    "        'notas': st.column_config.LineChartColumn(\n",
    "            'Notas dadas pelos funcionários',\n",
    "            width='medium',\n",
    "            y_min = 0,\n",
    "            y_max = 5\n",
    "        )\n",
    "    }\n",
    "    )\n",
    "\n",
    "st.title('Avaliação por vaga')\n",
    "\n",
    "empresa = st.selectbox('Qual é a vaga a ser avaliada?', (df['Empresa'].unique()) )\n",
    "if df_analise.loc[df_analise['Empresa'] == empresa].shape[0] > 1:\n",
    "    classes = df_analise.loc[df_analise['Empresa'] == empresa, 'Vaga'].unique()\n",
    "    genre = st.radio(\n",
    "        label = f\"Qual das {df_analise.loc[df_analise['Empresa'] == empresa].shape[0]} você deseja averiguar?\",        \n",
    "        options = classes)\n",
    "\n",
    "\n",
    "\n",
    "# Mostrar texto de contratação\n",
    "df_analise = df.loc[df['Empresa'] == empresa]\n",
    "\n",
    "\n",
    "\n",
    "# Mostrar as estatísticas \n",
    "texto = df_analise['Descrição'].iloc[0]\n",
    "st.subheader(f'Descrição da vaga', divider='green')\n",
    "st.write(texto)\n",
    "df_analise = df_analise.drop(['Descrição','Link','Unnamed: 0'], axis=1)\n",
    "\n",
    "\n",
    "\n",
    "st.subheader(f'Informações complementares da empresa', divider='green')\n",
    "st.data_editor(\n",
    "    df_analise,\n",
    "    column_config={\n",
    "        'notas': st.column_config.LineChartColumn(\n",
    "            'Notas dadas pelos funcionários',\n",
    "            width='medium',\n",
    "            y_min = 0,\n",
    "            y_max = 5\n",
    "        ),\n",
    "        'Nota':st.column_config.NumberColumn(\n",
    "            \"Nota dos funcionários\",\n",
    "            min_value=0,\n",
    "            max_value=5,\n",
    "            step=1,\n",
    "            format=\"%d ⭐\")  \n",
    "    }\n",
    "    )\n",
    "\n",
    "st.subheader(f'Código usado para essa página do streamlit', divider='green')\n",
    "\n",
    "\n",
    "code = \"\"\"\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px\n",
    "import plotly.subplots as sp\n",
    "import plotly.graph_objects as go\n",
    "\n",
    "st.set_page_config(layout=\"wide\")\n",
    "st.title('Módulo 15 - Atividade I')\n",
    "st.write('- Reproduzir, ao menos, 20 códigos extraídos das páginas da documentação do streamlit')\n",
    "st.write('- Para realizar a atividade, irei utilizar um dataset que fiz coleta e tratamento, usando como base a glassdoor. O dataset consiste'\n",
    "         'sobre informações de vagas de emprego em meados de 2022 (se não me engano). Como o foco desse trabalho não é sobre webscrapping, deixo aqui'\n",
    "         'informado abaixo o link do código que usei para coletar os dados. ')\n",
    "\n",
    "st.write(\" Segue o link para a coleta de dados -> [https://alcidescoutinho.github.io/alcidesgabriel.github.io/C%C3%B3digo%20em%20HTML/Coleta_dos_dados_de_vaga%20(1).html]\")\n",
    "\n",
    "st.button(\"Rerun\")\n",
    "def carregar_dados():\n",
    "    data = pd.read_csv(\"base_dados_tratado.csv\")\n",
    "    return data\n",
    "\n",
    "df = carregar_dados()\n",
    "notas = list()\n",
    "for i in range(df.shape[0]):\n",
    "    notas.append(df.iloc[i,12:17].tolist())\n",
    "    \n",
    "df['notas'] = notas\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "st.title('Avaliação por Local da vaga')\n",
    "# elementos \n",
    "locais = df['Local'].unique().tolist()\n",
    "locais.insert(0,'Todos')\n",
    "local_ = st.selectbox(\n",
    "    'Qual local da vaga deseja avaliar?',\n",
    "    (locais)\n",
    ")\n",
    "\n",
    "if local_ == 'Todos':\n",
    "    df_analise = df.copy()\n",
    "else:\n",
    "    df_analise = df.loc[df['Local'] == local_].copy()\n",
    "\n",
    "st.subheader(f'Para a seleção {local_}, há um total de ...{df_analise.shape[0]}.. vagas encontradas', divider='rainbow')\n",
    "\n",
    "def imagem():\n",
    "    figura = sp.make_subplots(rows=3, \n",
    "                              cols=2, \n",
    "                              specs=[[{'type':'domain'},{'type':'domain'}],[{'colspan':2}, None], [{'colspan':2}, None]],\n",
    "                              subplot_titles=('Locais','Experiência','Setores da contratantes',' Gráfico de dispersão da avaliação dos funcionários'))\n",
    "    \n",
    "    \n",
    "    \n",
    "    valores = df_analise['Local'].value_counts().values\n",
    "    nomes = df_analise['Local'].value_counts().index\n",
    "\n",
    "    figura.add_trace(go.Pie(values=valores, labels=nomes), row=1,col=1)\n",
    "    \n",
    "        \n",
    "    valores = df_analise['Experiência'].value_counts().values\n",
    "    nomes = df_analise['Experiência'].value_counts().index\n",
    "    figura.add_trace(go.Pie(values=valores, labels=nomes), row=1,col=2)\n",
    "    palette_de_cores = px.colors.qualitative.Set3\n",
    "    figura.update_traces(marker=dict(colors=palette_de_cores))\n",
    "    \n",
    "\n",
    "\n",
    "    valores = df_analise['Setor'].value_counts().values\n",
    "    nomes = df_analise['Setor'].value_counts().index\n",
    "    figura.add_trace(go.Bar(x=nomes, y=valores,text=valores, textposition='outside'))\n",
    "\n",
    "\n",
    "    elementos = [i for i in range(12,17,1)]\n",
    "    elementos.insert(0,4)\n",
    "\n",
    "    valores = df_analise.iloc[:,elementos].melt()['value']\n",
    "    nomes = df_analise.iloc[:,elementos].melt()['variable']\n",
    "    figura.add_trace(go.Box(x=valores, y=nomes, orientation='h'),row=3,col=1)\n",
    "\n",
    "\n",
    "    figura.update_layout(width=1380, height=1380, showlegend=True, grid={'rows': 1, 'columns': 2},\n",
    "                        legend=dict(x=0, y=1.15))\n",
    "    \n",
    "    \n",
    "    return st.plotly_chart(figura)\n",
    "\n",
    "imagem()\n",
    "\n",
    "\n",
    "# Mostrar locais de vaga\n",
    "\n",
    "df_analise = df_analise.loc[:,['Empresa','Vaga','Sede','Tamanho','Setor','notas']]\n",
    "\n",
    "\n",
    "st.data_editor(\n",
    "    df_analise,\n",
    "    column_config={\n",
    "        'notas': st.column_config.LineChartColumn(\n",
    "            'Notas dadas pelos funcionários',\n",
    "            width='medium',\n",
    "            y_min = 0,\n",
    "            y_max = 5\n",
    "        )\n",
    "    }\n",
    "    )\n",
    "\n",
    "st.title('Avaliação por vaga')\n",
    "\n",
    "empresa = st.selectbox('Qual é a vaga a ser avaliada?', (df['Empresa'].unique()) )\n",
    "if df_analise.loc[df_analise['Empresa'] == empresa].shape[0] > 1:\n",
    "    classes = df_analise.loc[df_analise['Empresa'] == empresa, 'Vaga'].unique()\n",
    "    genre = st.radio(\n",
    "        label = f\"Qual das {df_analise.loc[df_analise['Empresa'] == empresa].shape[0]} você deseja averiguar?\",        \n",
    "        options = classes)\n",
    "\n",
    "\n",
    "\n",
    "# Mostrar texto de contratação\n",
    "df_analise = df.loc[df['Empresa'] == empresa]\n",
    "\n",
    "\n",
    "\n",
    "# Mostrar as estatísticas \n",
    "texto = df_analise['Descrição'].iloc[0]\n",
    "st.subheader(f'Descrição da vaga', divider='green')\n",
    "st.write(texto)\n",
    "df_analise = df_analise.drop(['Descrição','Link','Unnamed: 0'], axis=1)\n",
    "\n",
    "\n",
    "\n",
    "st.subheader(f'Informações complementares da empresa', divider='green')\n",
    "st.data_editor(\n",
    "    df_analise,\n",
    "    column_config={\n",
    "        'notas': st.column_config.LineChartColumn(\n",
    "            'Notas dadas pelos funcionários',\n",
    "            width='medium',\n",
    "            y_min = 0,\n",
    "            y_max = 5\n",
    "        ),\n",
    "        'Nota':st.column_config.NumberColumn(\n",
    "            \"Nota dos funcionários\",\n",
    "            min_value=0,\n",
    "            max_value=5,\n",
    "            step=1,\n",
    "            format=\"%d ⭐\")  \n",
    "    }\n",
    "    )\n",
    "\n",
    "st.subheader(f'Código usado para essa página do streamlit', divider='green')\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "st.code(code, language='python')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
